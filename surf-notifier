import os
import requests
from datetime import datetime, timedelta
import logging
import sys
from collections import defaultdict
from telegram import Bot

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SurfNotifier:
    def __init__(self):
        self.api_key = os.getenv('STORMGLASS_API_KEY')
        self.lat = 51.4854
        self.lng = -3.7031
        self.params = [
            'waveHeight', 'wavePeriod', 'waveDirection',
            'windSpeed', 'windDirection'
        ]
        self.bot_token = os.getenv('TELEGRAM_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        if not all([self.api_key, self.bot_token, self.chat_id]):
            logger.error("Missing required environment variables: STORMGLASS_API_KEY, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID")
            sys.exit(1)

    def fetch_weather(self, start, end):
        url = "https://api.stormglass.io/v2/weather/point"
        headers = {'Authorization': self.api_key}
        params = {
            'lat': self.lat,
            'lng': self.lng,
            'params': ','.join(self.params),
            'start': start.isoformat() + 'Z',
            'end': end.isoformat() + 'Z'
        }
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()['hours']

    def fetch_tides(self, start, end):
        url = "https://api.stormglass.io/v2/tide/extremes/point"
        headers = {'Authorization': self.api_key}
        params = {
            'lat': self.lat,
            'lng': self.lng,
            'start': start.isoformat() + 'Z',
            'end': end.isoformat() + 'Z'
        }
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()['data']

    def fetch_sun(self, start, end):
        url = "https://api.stormglass.io/v2/astronomy/point"
        headers = {'Authorization': self.api_key}
        params = {
            'lat': self.lat,
            'lng': self.lng,
            'start': start.isoformat() + 'Z',
            'end': end.isoformat() + 'Z'
        }
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()['data']

    def get_param_value(self, hour_data, param):
        if param in hour_data and isinstance(hour_data[param], dict):
            for value in hour_data[param].values():
                if value is not None:
                    return value
        return None

    def calculate_score(self, wave_height, wave_period, wind_speed, wind_direction, wave_direction):
        score = 0
        if wave_height:
            if 1.0 <= wave_height <= 2.5:
                score += 35
            elif 0.5 <= wave_height < 1.0:
                score += 25
            elif 2.5 < wave_height <= 4.0:
                score += 20
            elif wave_height > 4.0:
                score += 5

        if wave_period:
            if wave_period >= 12:
                score += 25
            elif wave_period >= 8:
                score += 20
            elif wave_period >= 6:
                score += 15
            else:
                score += 5

        if wind_speed and wind_direction and wave_direction:
            wind_relative = abs(wind_direction - wave_direction)
            if wind_relative > 180:
                wind_relative = 360 - wind_relative
            if wind_relative > 135:
                score += 25 if wind_speed <= 5 else 20 if wind_speed <= 10 else 10
            elif wind_relative < 45:
                score += 5
            else:
                score += 15

        if wind_speed and wind_speed > 15:
            score -= 10

        return max(0, min(100, score))

    def format_day_report(self, day, scores, tides, sun):
        summary = f"\nüìÖ {day.strftime('%A, %B %d')}\n"
        summary += f"Surf Score: {scores['score']:.0f}/100\n"
        summary += f"Wave Height: {scores['wave_height']:.2f} m\n"
        summary += f"Wave Period: {scores['wave_period']:.1f} s\n"
        summary += f"Wind Speed: {scores['wind_speed']:.1f} m/s\n"
        summary += f"Wind Direction: {scores['wind_direction']:.0f}¬∞\n"
        summary += f"Wave Direction: {scores['wave_direction']:.0f}¬∞\n"
        summary += f"Tide Times: {', '.join(tides)}\n"
        summary += f"Sunrise: {sun['sunrise']} | Sunset: {sun['sunset']}\n"
        return summary

    def notify(self, message):
        bot = Bot(token=self.bot_token)
        try:
            bot.send_message(chat_id=self.chat_id, text=message)
            logger.info("Notification sent successfully")
        except Exception as e:
            logger.error(f"Failed to send notification: {e}")

    def run(self):
        today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        end = today + timedelta(days=5)

        try:
            weather_data = self.fetch_weather(today, end)
            tide_data = self.fetch_tides(today, end)
            sun_data = self.fetch_sun(today, end)
        except Exception as e:
            logger.error(f"API request failed: {e}")
            return

        # Organize tide data per day
        tides_by_day = defaultdict(list)
        for tide in tide_data:
            dt = datetime.fromisoformat(tide['time'].replace('Z', ''))
            label = "High" if tide['type'] == 'high' else "Low"
            tides_by_day[dt.date()].append(f"{label} {dt.strftime('%H:%M')}")

        # Organize sun data per day
        sun_by_day = {}
        for sun in sun_data:
            dt = datetime.fromisoformat(sun['time'].replace('Z', ''))
            sun_by_day[dt.date()] = {
                'sunrise': sun['sunrise'].split('T')[1][:5],
                'sunset': sun['sunset'].split('T')[1][:5]
            }

        # Score forecasts by day
        scores_by_day = {}
        grouped = defaultdict(list)
        for hour in weather_data:
            dt = datetime.fromisoformat(hour['time'].replace('Z', ''))
            grouped[dt.date()].append(hour)

        for day, hours in grouped.items():
            noon_data = hours[min(range(len(hours)), key=lambda i: abs(datetime.fromisoformat(hours[i]['time'].replace('Z', '')).hour - 12))]
            wave_height = self.get_param_value(noon_data, 'waveHeight')
            wave_period = self.get_param_value(noon_data, 'wavePeriod')
            wave_direction = self.get_param_value(noon_data, 'waveDirection')
            wind_speed = self.get_param_value(noon_data, 'windSpeed')
            wind_direction = self.get_param_value(noon_data, 'windDirection')
            score = self.calculate_score(wave_height, wave_period, wind_speed, wind_direction, wave_direction)

            scores_by_day[day] = {
                'score': score,
                'wave_height': wave_height,
                'wave_period': wave_period,
                'wave_direction': wave_direction,
                'wind_speed': wind_speed,
                'wind_direction': wind_direction,
            }

        best_day = max(scores_by_day.items(), key=lambda x: x[1]['score'])[0]
        today_key = today.date()

        message = "üèÑ‚Äç‚ôÇÔ∏è Surf Forecast - Rest Bay\n"

        if today_key in scores_by_day:
            message += self.format_day_report(
                today_key,
                scores_by_day[today_key],
                tides_by_day.get(today_key, []),
                sun_by_day.get(today_key, {'sunrise': 'N/A', 'sunset': 'N/A'})
            )

        if best_day != today_key:
            message += "\nüåü Best Day Forecast:\n"
            message += self.format_day_report(
                best_day,
                scores_by_day[best_day],
                tides_by_day.get(best_day, []),
                sun_by_day.get(best_day, {'sunrise': 'N/A', 'sunset': 'N/A'})
            )

        self.notify(message)


if __name__ == "__main__":
    SurfNotifier().run()
