import os
import requests
from datetime import datetime
import logging
import sys
import asyncio

from telegram import Update
from telegram.ext import Application

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class SurfNotifier:
    def __init__(self):
        self.api_key = os.getenv('STORMGLASS_API_KEY')
        self.lat = 51.4854
        self.lng = -3.7031
        self.params = [
            'waveHeight', 'wavePeriod', 'waveDirection',
            'windSpeed', 'windDirection', 'airTemperature'
        ]
        self.bot_token = os.getenv('TELEGRAM_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        if not all([self.api_key, self.bot_token, self.chat_id]):
            logger.error("Missing required environment variables: STORMGLASS_API_KEY, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID")
            sys.exit(1)

    def fetch_data(self):
        url = "https://api.stormglass.io/v2/weather/point"
        params = {
            'lat': self.lat,
            'lng': self.lng,
            'params': ','.join(self.params),
            'start': datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S'),
            'end': datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S'),
        }
        headers = {'Authorization': self.api_key}

        try:
            response = requests.get(url, params=params, headers=headers, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Error fetching data from Stormglass: {e}")
            return None

    def get_param_value(self, hour_data, param):
        if param in hour_data and isinstance(hour_data[param], dict):
            for source, value in hour_data[param].items():
                if value is not None:
                    return value
        return None

    def calculate_score(self, wave_height, wave_period, wind_speed, wind_direction, wave_direction):
        score = 0
        if wave_height:
            if 1.0 <= wave_height <= 2.5:
                score += 35
            elif 0.5 <= wave_height < 1.0:
                score += 25
            elif 2.5 < wave_height <= 4.0:
                score += 20
            elif wave_height > 4.0:
                score += 5

        if wave_period:
            if wave_period >= 12:
                score += 25
            elif wave_period >= 8:
                score += 20
            elif wave_period >= 6:
                score += 15
            else:
                score += 5

        if wind_speed and wind_direction and wave_direction:
            wind_relative = abs(wind_direction - wave_direction)
            if wind_relative > 180:
                wind_relative = 360 - wind_relative

            if wind_relative > 135:  # Offshore winds best
                if wind_speed <= 5:
                    score += 25
                elif wind_speed <= 10:
                    score += 20
                else:
                    score += 10
            elif wind_relative < 45:  # Onshore
                score += 5
            else:
                score += 15

        if wind_speed and wind_speed > 15:
            score -= 10

        return max(0, min(100, score))

    async def notify(self, message):
        app = Application.builder().token(self.bot_token).build()
        try:
            await app.bot.send_message(chat_id=self.chat_id, text=message)
            logger.info("Notification sent successfully")
        except Exception as e:
            logger.error(f"Failed to send notification: {e}")
        finally:
            await app.shutdown()

    async def run(self):
        data = self.fetch_data()
        if not data or 'hours' not in data or len(data['hours']) == 0:
            logger.error("No forecast data received")
            return

        hour_data = data['hours'][0]

        wave_height = self.get_param_value(hour_data, 'waveHeight')
        wave_period = self.get_param_value(hour_data, 'wavePeriod')
        wave_direction = self.get_param_value(hour_data, 'waveDirection')
        wind_speed = self.get_param_value(hour_data, 'windSpeed')
        wind_direction = self.get_param_value(hour_data, 'windDirection')
        air_temp = self.get_param_value(hour_data, 'airTemperature')

        score = self.calculate_score(wave_height, wave_period, wind_speed, wind_direction, wave_direction)

        date_str = datetime.utcnow().strftime('%A, %B %d %Y %H:%M UTC')
        message = f"""üèÑ‚Äç‚ôÇÔ∏è Rest Bay Surf Forecast - {date_str}

Wave Height: {wave_height:.2f} m
Wave Period: {wave_period:.1f} s
Wind Speed: {wind_speed:.1f} m/s
Wind Direction: {wind_direction:.0f}¬∞
Wave Direction: {wave_direction:.0f}¬∞
Air Temperature: {air_temp:.1f}¬∞C

Surf Score: {score:.0f}/100

Check tide times: https://www.bbc.co.uk/weather/coast-and-sea/tide-tables/11/512
"""
        await self.notify(message)


if __name__ == "__main__":
    notifier = SurfNotifier()
    asyncio.run(notifier.run())
